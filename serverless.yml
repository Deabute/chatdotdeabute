service: signals

provider:
    name: aws
    stage: dev
    runtime: nodejs10.x
    region: us-east-1
    timeout: 4
    memorySize: 256
    environment:
        MONGODB_URI: ${env:MONGODB_URI}
        DB_NAME: ${env:DB_NAME}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "execute-api:ManageConnections"
        Resource:
          - "arn:aws:execute-api:*:*:**/@connections/*"

functions:
    connect:
        description: "adds connected users to db"
        handler: src/lambda/gateway.connect
        events:
          - websocket:
              route: $connect
    disconnect:
        description: "removes disconnected users from db"
        handler: src/lambda/gateway.disconnect
        events:
          - websocket:
              route: $disconnect
    default:
        description: "handles unhandled routes"
        handler: src/lambda/gateway.default
        events:
          - websocket:
              route: $default
    ice:
        description: "Trade connection info among peers"
        handler: src/lambda/rtc.ice
        events:
          - websocket:
              route: ice
    offer:
        description: "offer descriptions of connection compatibility among peers"
        handler: src/lambda/rtc.offer
        events:
          - websocket:
              route: offer
    answer:
        description: "receive connection compatibility information"
        handler: src/lambda/rtc.answer
        events:
          - websocket:
              route: answer
    repool:
        description: "add users into connection pool"
        handler: src/lambda/rtc.repool
        events:
          - websocket:
              route: repool
    connected:
        description: "also add users into connection pool"
        handler: src/lambda/rtc.connected
        events:
          - websocket:
              route: connected
    reduce:
        description: "Reduces users from connection pool"
        handler: src/lambda/rtc.reduce
        events:
          - websocket:
              route: reduce
    pause:
        description: "state between unconnected and able to connect"
        handler: src/lambda/rtc.pause
        events:
          - websocket:
              route: pause
    unmatched:
        description: "ready to be connected with another peer"
        handler: src/lambda/rtc.unmatched
        events:
          - websocket:
              route: unmatched
    remove:
        description: "removes users from activity matching list"
        handler: src/lambda/rtc.remove
        events:
          - websocket:
              route: remove
    login:
        description: "authenticate user logins"
        handler: src/lambda/user.login
        events:
          - websocket:
              route: login
    signup:
        description: "register users"
        handler: src/lambda/user.signup
        events:
          - websocket:
              route: signup
    status:
        description: "get user status on links"
        handler: src/lambda/user.status
        events:
          - websocket:
              route: status
